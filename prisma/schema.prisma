// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(cuid())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  classes   Class[]
  students  Student[]
  documents Document[]

  @@map("schools")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(TEACHER)
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classes   Class[]
  recordings Recording[]
  documents Document[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
}

model Student {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  avatarUrl String?
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classStudents ClassStudent[]

  @@map("students")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  subject     String
  location    String
  schedule    String
  maxStudents Int      @default(30)
  teacherId   String
  schoolId    String
  status      String   @default("SCHEDULED")
  description String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     User          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  school      School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classStudents ClassStudent[]
  recordings  Recording[]

  @@map("classes")
}

model ClassStudent {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  enrolledAt DateTime @default(now())
  status    String   @default("ACTIVE")

  // Relations
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_students")
}

model Recording {
  id          String   @id @default(cuid())
  classId     String
  teacherId   String
  transcript  String?
  duration    Int      @default(0) // in seconds
  recordingUrl String?
  status      String   @default("IN_PROGRESS")
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  class   Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher User       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  analyses AIAnalysis[]

  @@map("recordings")
}

model AIAnalysis {
  id           String        @id @default(cuid())
  recordingId  String
  analysisData String        // JSON as string for SQLite
  status       String        @default("PENDING")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  recording Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@map("ai_analyses")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  filename    String
  originalName String  // Nombre original del archivo
  fileType    String
  fileSize    Int
  s3Key       String   // Clave del archivo en S3
  s3Url       String?  // URL temporal firmada de S3
  content     String?  // Contenido extraído del documento
  chunks      String?  // JSON array de chunks procesados
  category    String?  // Categoría del documento (ej: "lecturas", "ejercicios", "recursos")
  tags        String?  // JSON array de tags
  status      String   @default("PROCESSING") // PROCESSING, READY, ERROR
  teacherId   String
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  school  School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Note: SQLite doesn't support enums, using strings instead
// Valid values:
// UserRole: "TEACHER", "ADMIN"
// EnrollmentStatus: "ACTIVE", "INACTIVE", "SUSPENDED"
// ClassStatus: "SCHEDULED", "IN_PROGRESS", "COMPLETED", "CANCELLED"
// RecordingStatus: "IN_PROGRESS", "COMPLETED", "FAILED", "CANCELLED"
// AnalysisStatus: "PENDING", "COMPLETED", "FAILED"